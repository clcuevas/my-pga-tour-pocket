{"version":3,"sources":["pages/Home/PuttForm/components/SlopeField.jsx","pages/Home/PuttForm/components/GreenSlopes.jsx","pages/Home/PuttForm/components/YellowSlopes.jsx","pages/Home/PuttForm/components/OrangeSlopes.jsx","pages/Home/PuttForm/components/RedSlopes.jsx","pages/Home/PuttForm/PuttForm.jsx","utils/slopeCalculations.js","pages/Home/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["GreenSlopeField","props","min","required","value","Fragment","label","displayHeader","name","fieldName","validate","input","meta","options","map","i","error","touched","validators","reduce","validator","composeValidators","Number","isNaN","type","placeholder","GreenSlopes","useState","greenSlopeFormFieldCount","setGreenSlopeFormFieldCount","greenSlopeUserCreatedFields","setGreenSlopeUserCreatedFields","SlopeField","FieldComponent","index","onClick","disabled","YellowSlopes","slopeFormFieldCount","setSlopeFormFieldCount","slopeUserCreatedFields","setSlopeUserCreatedFields","OrangeSlopes","RedSlopes","PuttForm","onSubmit","data","sum","count","Object","keys","filter","key","includes","forEach","userInputCount","typeKey","replace","userInputType","parseInt","calcGreenSlope","calcYellowSlope","calcOrangeSlope","calcRedSlope","console","log","handleSubmit","Home","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da348466.chunk.js","sourcesContent":["import React from 'react';\nimport { Field } from 'react-final-form';\n\nconst GreenSlopeField = (props) => {\n  const required = (value) => (value ? null : 'Required');\n\n  const mustBeNumber = (value) =>\n    Number.isNaN(value) ? 'Must be a number' : null;\n\n  const minValue = (min) => (value) =>\n    Number.isNaN(value) || value >= min\n      ? null\n      : `Should be greater than ${min}`;\n\n  const composeValidators = (...validators) => (value) =>\n    validators.reduce((error, validator) => error || validator(value), null);\n\n  return (\n    <React.Fragment>\n      {props.label && props.displayHeader && <h3>{props.label} Slopes</h3>}\n      <Field name={`${props.fieldName}Type`} validate={required}>\n        {({ input, meta }) => (\n          <div>\n            {props.label && <label>{props.label} Slope</label>}\n            <select {...input}>\n              <option />\n              {props.options.map((value, i) => (\n                <option value={value} key={`option-${i + 1}`}>\n                  {props.label} {value}\n                </option>\n              ))}\n            </select>\n            {meta.error && meta.touched && <span>{meta.error}</span>}\n          </div>\n        )}\n      </Field>\n\n      <Field\n        name={`${props.fieldName}Count`}\n        validate={composeValidators(required, mustBeNumber, minValue(1))}>\n        {({ input, meta }) => (\n          <div>\n            <label>No.</label>\n            <input {...input} type=\"text\" placeholder=\"Count\" />\n            {meta.error && meta.touched && <span>{meta.error}</span>}\n          </div>\n        )}\n      </Field>\n    </React.Fragment>\n  );\n};\n\nexport default GreenSlopeField;\n","import React, { useState } from 'react';\n\nimport SlopeField from './SlopeField';\n\nconst GreenSlopes = () => {\n  const [greenSlopeFormFieldCount, setGreenSlopeFormFieldCount] = useState(1);\n  const [\n    greenSlopeUserCreatedFields,\n    setGreenSlopeUserCreatedFields,\n  ] = useState([]);\n\n  return (\n    <div>\n      <SlopeField\n        fieldName=\"greenSlope\"\n        label=\"Green\"\n        options={[1, 2, 3]}\n        displayHeader\n      />\n\n      {greenSlopeUserCreatedFields.map((FieldComponent, index) => (\n        <div key={`green-slope-field-${index + 1}`}>\n          <FieldComponent\n            fieldName={`greenSlope${index + 1}`}\n            label=\"Green\"\n            options={[1, 2, 3]}\n          />\n        </div>\n      ))}\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          setGreenSlopeUserCreatedFields([\n            ...greenSlopeUserCreatedFields,\n            SlopeField,\n          ]);\n          setGreenSlopeFormFieldCount(greenSlopeFormFieldCount + 1);\n        }}\n        disabled={greenSlopeFormFieldCount === 3}>\n        Add Green Slope Field\n      </button>\n    </div>\n  );\n};\n\nexport default GreenSlopes;\n","import React, { useState } from 'react';\n\nimport SlopeField from './SlopeField';\n\nconst YellowSlopes = () => {\n  const [slopeFormFieldCount, setSlopeFormFieldCount] = useState(0);\n  const [slopeUserCreatedFields, setSlopeUserCreatedFields] = useState([]);\n\n  return (\n    <div>\n      {slopeUserCreatedFields.map((FieldComponent, index) => (\n        <div key={`yellow-slope-field-${index + 1}`}>\n          <FieldComponent\n            fieldName={`yellowSlope${index + 1}`}\n            label=\"Yellow\"\n            options={[4, 5, 6]}\n            displayHeader={index === 0}\n          />\n        </div>\n      ))}\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          setSlopeUserCreatedFields([...slopeUserCreatedFields, SlopeField]);\n          setSlopeFormFieldCount(slopeFormFieldCount + 1);\n        }}\n        disabled={slopeFormFieldCount === 3}>\n        Add Yellow Slope Field\n      </button>\n    </div>\n  );\n};\n\nexport default YellowSlopes;\n","import React, { useState } from 'react';\n\nimport SlopeField from './SlopeField';\n\nconst OrangeSlopes = () => {\n  const [slopeFormFieldCount, setSlopeFormFieldCount] = useState(0);\n  const [slopeUserCreatedFields, setSlopeUserCreatedFields] = useState([]);\n\n  return (\n    <div>\n      {slopeUserCreatedFields.map((FieldComponent, index) => (\n        <div key={`orange-slope-field-${index + 1}`}>\n          <FieldComponent\n            fieldName={`orangeSlope${index + 1}`}\n            label=\"Orange\"\n            options={[7, 8, 9]}\n            displayHeader={index === 0}\n          />\n        </div>\n      ))}\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          setSlopeUserCreatedFields([...slopeUserCreatedFields, SlopeField]);\n          setSlopeFormFieldCount(slopeFormFieldCount + 1);\n        }}\n        disabled={slopeFormFieldCount === 3}>\n        Add Orange Slope Field\n      </button>\n    </div>\n  );\n};\n\nexport default OrangeSlopes;\n","import React, { useState } from 'react';\n\nimport SlopeField from './SlopeField';\n\nconst RedSlopes = () => {\n  const [slopeFormFieldCount, setSlopeFormFieldCount] = useState(0);\n  const [slopeUserCreatedFields, setSlopeUserCreatedFields] = useState([]);\n\n  return (\n    <div>\n      {slopeUserCreatedFields.map((FieldComponent, index) => (\n        <div key={`red-slope-field-${index + 1}`}>\n          <FieldComponent\n            fieldName={`redSlope${index + 1}`}\n            label=\"Red\"\n            options={[10, 11, 12]}\n            displayHeader={index === 0}\n          />\n        </div>\n      ))}\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          setSlopeUserCreatedFields([...slopeUserCreatedFields, SlopeField]);\n          setSlopeFormFieldCount(slopeFormFieldCount + 1);\n        }}\n        disabled={slopeFormFieldCount === 3}>\n        Add Red Slope Field\n      </button>\n    </div>\n  );\n};\n\nexport default RedSlopes;\n","import React from 'react';\nimport { Form } from 'react-final-form';\n\nimport {\n  calcGreenSlope,\n  calcYellowSlope,\n  calcOrangeSlope,\n  calcRedSlope,\n} from '../../../utils/slopeCalculations';\n\nimport GreenSlopes from './components/GreenSlopes';\nimport YellowSlopes from './components/YellowSlopes';\nimport OrangeSlopes from './components/OrangeSlopes';\nimport RedSlopes from './components/RedSlopes';\n\nconst PuttForm = () => {\n  const handleOnSubmit = (data) => {\n    // The data here is the \"name\" value we are adding to the <Field /> component.\n    // For example <Field name=\"greenSlopeType\" />. The data will return an object\n    // with the key/value of { greenSlopeType: <option value> } (i.e. what the\n    // user selected).\n    const greenSlopeCount = calcGreenSlope(data);\n    const yellowSlopeCount = calcYellowSlope(data);\n    const orangeSlopeCount = calcOrangeSlope(data);\n    const redSlopeCount = calcRedSlope(data);\n\n    const sum =\n      greenSlopeCount + yellowSlopeCount + orangeSlopeCount + redSlopeCount;\n\n    console.log(sum);\n  };\n\n  return (\n    <Form onSubmit={handleOnSubmit}>\n      {(props) => (\n        <form onSubmit={props.handleSubmit}>\n          <GreenSlopes />\n          <YellowSlopes />\n          <OrangeSlopes />\n          <RedSlopes />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    </Form>\n  );\n};\n\nexport default PuttForm;\n","const calcGreenSlope = (data) => {\n  let count = 0;\n\n  let props = Object.keys(data).filter((key) => key.includes('greenSlope'));\n\n  props.forEach((key) => {\n    if (key.includes('Count')) {\n      const userInputCount = data[key];\n      const typeKey = key.replace('Count', 'Type');\n      const userInputType = data[typeKey];\n\n      count +=\n        Number.parseInt(userInputCount, 10) *\n        Number.parseInt(userInputType, 10);\n    }\n  });\n\n  return count;\n};\n\nconst calcYellowSlope = (data) => {\n  let count = 0;\n\n  let props = Object.keys(data).filter((key) => key.includes('yellowSlope'));\n\n  props.forEach((key) => {\n    if (key.includes('Count')) {\n      const userInputCount = data[key];\n      const typeKey = key.replace('Count', 'Type');\n      const userInputType = data[typeKey];\n\n      count +=\n        Number.parseInt(userInputCount, 10) *\n        Number.parseInt(userInputType, 10);\n    }\n  });\n\n  return count;\n};\n\nconst calcOrangeSlope = (data) => {\n  let count = 0;\n\n  let props = Object.keys(data).filter((key) => key.includes('orangeSlope'));\n\n  props.forEach((key) => {\n    if (key.includes('Count')) {\n      const userInputCount = data[key];\n      const typeKey = key.replace('Count', 'Type');\n      const userInputType = data[typeKey];\n\n      count +=\n        Number.parseInt(userInputCount, 10) *\n        Number.parseInt(userInputType, 10);\n    }\n  });\n\n  return count;\n};\n\nconst calcRedSlope = (data) => {\n  let count = 0;\n\n  let props = Object.keys(data).filter((key) => key.includes('redSlope'));\n\n  props.forEach((key) => {\n    if (key.includes('Count')) {\n      const userInputCount = data[key];\n      const typeKey = key.replace('Count', 'Type');\n      const userInputType = data[typeKey];\n\n      count +=\n        Number.parseInt(userInputCount, 10) *\n        Number.parseInt(userInputType, 10);\n    }\n  });\n\n  return count;\n};\n\nexport { calcGreenSlope, calcYellowSlope, calcOrangeSlope, calcRedSlope };\n","import React from 'react';\n\nimport PuttForm from './PuttForm';\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>PGA Putting - Green Grid Reading</h1>\n      <PuttForm />\n    </div>\n  );\n};\n\nexport default Home;\n","import Home from \"./pages/Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}