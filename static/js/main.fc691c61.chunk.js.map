{"version":3,"sources":["utils/slopeCalculations.js","utils/validators.js","pages/Home/PuttForm/SlopeField.jsx","pages/Home/PuttForm/Slopes.jsx","pages/Home/PuttForm/ElevationField.jsx","pages/Home/PuttForm/PuttForm.jsx","pages/Home/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["getSlopeSum","data","sum","count","Object","keys","filter","key","includes","forEach","type","slopeType","Number","parseInt","slopeCount","replace","calcSlope","elevationType","Math","floor","elevationInches","required","value","mustBeNumber","isNaN","minValue","min","composeValidators","validators","reduce","error","validator","Styled","Container","styled","div","Header","h3","FieldContainer","FieldContentContainer","FieldError","span","FieldLabel","label","FieldSelectContainer","FieldInputContainer","Select","select","Input","input","slopes","GreenSlopeField","props","displayHeader","name","fieldName","indexLabel","validate","meta","map","i","string","charAt","toUpperCase","slice","touched","placeholder","Button","button","Slopes","useState","slopeFormFieldCount","setSlopeFormFieldCount","slopeUserCreatedFields","setSlopeUserCreatedFields","SlopeField","FieldComponent","index","onClick","disabled","ElevationField","Form","form","SubmitButton","PuttForm","onSubmit","elevationData","feetHole","holeFeet","inches","feetAdjustment","adjustedTotalFeet","isFiftyFeetOrMore","direction","calcElevation","renderResults","clickCount","handleSubmit","SubmissionContainer","SubmissionHeader","ResultsContainer","ResultsItem","Home","isFormSubmitted","setIsFormSubmitted","results","setResults","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc691c61.chunk.js","sourcesContent":["const calcSlope = (data) => {\n  let count = 0;\n  let types = Object.keys(data).filter((key) => key.includes('slopeType'));\n\n  types.forEach((type) => {\n    const slopeType = Number.parseInt(data[type], 10);\n    const slopeCount = Number.parseInt(data[type.replace('Type', 'Count')], 10);\n\n    count += slopeType * slopeCount;\n  });\n\n  return count;\n};\n\nconst getSlopeSum = (data) => {\n  let sum = calcSlope(data);\n\n  if (data.elevationType === 'down') {\n    // We need to adjust the sum when working with a downhill putt.\n    // For every 2 inches, we want to add 1 to our sum.\n    const adjustment = Math.floor(\n      Number.parseInt(data.elevationInches, 10) / 2,\n    );\n\n    sum += adjustment;\n  }\n\n  return sum;\n};\n\nconst calcElevation = (data) => {\n  const feetHole = Number.parseInt(data.holeFeet, 10);\n  const inches = Number.parseInt(data.elevationInches, 10);\n\n  const feetAdjustment = data.elevationType === 'up' ? inches * 1.5 : inches;\n  const adjustedTotalFeet =\n    data.elevationType === 'up'\n      ? feetHole + feetAdjustment\n      : feetHole - feetAdjustment;\n\n  const isFiftyFeetOrMore = adjustedTotalFeet >= 50;\n\n  return {\n    feetAdjustment,\n    adjustedTotalFeet: isFiftyFeetOrMore\n      ? adjustedTotalFeet / 2\n      : adjustedTotalFeet,\n    isFiftyFeetOrMore,\n    direction: data.elevationType,\n  };\n};\n\nexport { getSlopeSum, calcElevation };\n","export const required = (value) => (value ? null : 'Required');\n\nexport const mustBeNumber = (value) =>\n  Number.isNaN(value) ? 'Must be a number' : null;\n\nexport const minValue = (min) => (value) =>\n  Number.isNaN(value) || value >= min ? null : `Should be greater than ${min}`;\n\nexport const composeValidators = (...validators) => (value) =>\n  validators.reduce((error, validator) => error || validator(value), null);\n","import React from 'react';\nimport { Field } from 'react-final-form';\nimport styled from 'styled-components';\n\nimport {\n  composeValidators,\n  minValue,\n  mustBeNumber,\n  required,\n} from '../../../utils/validators';\n\nconst Styled = {\n  Container: styled.div``,\n  Header: styled.h3``,\n  FieldContainer: styled.div``,\n  FieldContentContainer: styled.div`\n    display: flex;\n\n    margin: 20px auto;\n  `,\n  FieldError: styled.span`\n    color: #ff1a1a;\n    font-weight: 500;\n    margin-left: 10px;\n  `,\n  FieldLabel: styled.label`\n    flex: 0 0 100px;\n\n    margin-right: 20px;\n  `,\n  FieldSelectContainer: styled.div`\n    flex: 1 0 0;\n  `,\n  FieldInputContainer: styled.div`\n    flex: 1 0 0;\n  `,\n  Select: styled.select`\n    padding: 5px;\n\n    max-width: 200px;\n    width: 100%;\n  `,\n  Input: styled.input`\n    padding: 5px;\n\n    max-width: 185px;\n    width: 100%;\n  `,\n};\n\nconst slopes = [\n  { type: 'green', value: 1 },\n  { type: 'green', value: 2 },\n  { type: 'green', value: 3 },\n  { type: 'yellow', value: 4 },\n  { type: 'yellow', value: 5 },\n  { type: 'yellow', value: 6 },\n  { type: 'orange', value: 7 },\n  { type: 'orange', value: 8 },\n  { type: 'orange', value: 9 },\n  { type: 'red', value: 10 },\n  { type: 'red', value: 11 },\n  { type: 'red', value: 12 },\n];\n\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst GreenSlopeField = (props) => (\n  <Styled.Container>\n    {props.displayHeader && <Styled.Header>Slopes</Styled.Header>}\n\n    <Styled.FieldContainer>\n      <Field\n        name={`${props.fieldName}Type${props.indexLabel}`}\n        validate={required}>\n        {({ input, meta }) => (\n          <Styled.FieldContentContainer>\n            <Styled.FieldLabel>Slope Type</Styled.FieldLabel>\n            <Styled.FieldSelectContainer>\n              <Styled.Select {...input}>\n                <option />\n                {slopes.map(({ type, value }, i) => (\n                  <option value={value} key={`option-${i + 1}`}>\n                    {capitalize(type)} {value}\n                  </option>\n                ))}\n              </Styled.Select>\n              {meta.error && meta.touched && (\n                <Styled.FieldError>{meta.error}</Styled.FieldError>\n              )}\n            </Styled.FieldSelectContainer>\n          </Styled.FieldContentContainer>\n        )}\n      </Field>\n\n      <Field\n        name={`${props.fieldName}Count${props.indexLabel}`}\n        validate={composeValidators(required, mustBeNumber, minValue(1))}>\n        {({ input, meta }) => (\n          <Styled.FieldContentContainer>\n            <Styled.FieldLabel>Slope Count</Styled.FieldLabel>\n            <Styled.FieldInputContainer>\n              <Styled.Input {...input} type=\"text\" placeholder=\"Count\" />\n              {meta.error && meta.touched && (\n                <Styled.FieldError>{meta.error}</Styled.FieldError>\n              )}\n            </Styled.FieldInputContainer>\n          </Styled.FieldContentContainer>\n        )}\n      </Field>\n    </Styled.FieldContainer>\n  </Styled.Container>\n);\n\nexport default GreenSlopeField;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport SlopeField from './SlopeField';\n\nconst Styled = {\n  Container: styled.div`\n    margin: 20px auto;\n  `,\n  Button: styled.button`\n    background-color: #77dd77;\n    border: 2px solid #4ed34e;\n    border-radius: 3px;\n    color: #444c44;\n    cursor: pointer;\n    font-size: 13px;\n    font-weight: 500;\n    padding: 10px;\n\n    &:hover {\n      background-color: #4ed34e;\n    }\n  `,\n};\n\nconst Slopes = () => {\n  const [slopeFormFieldCount, setSlopeFormFieldCount] = useState(1);\n  const [slopeUserCreatedFields, setSlopeUserCreatedFields] = useState([]);\n\n  const handleOnClick = () => {\n    setSlopeUserCreatedFields([...slopeUserCreatedFields, SlopeField]);\n    setSlopeFormFieldCount(slopeFormFieldCount + 1);\n  };\n\n  return (\n    <Styled.Container>\n      <SlopeField fieldName=\"slope\" indexLabel=\"0\" displayHeader />\n\n      {slopeUserCreatedFields.map((FieldComponent, index) => (\n        <div key={`slope-field-${index + 1}`}>\n          <FieldComponent fieldName=\"slope\" indexLabel={`${index + 1}`} />\n        </div>\n      ))}\n\n      <Styled.Button\n        type=\"button\"\n        onClick={handleOnClick}\n        disabled={slopeFormFieldCount === 12}>\n        Add Slope\n      </Styled.Button>\n    </Styled.Container>\n  );\n};\n\nexport default Slopes;\n","import React from 'react';\nimport { Field } from 'react-final-form';\nimport styled from 'styled-components';\n\nimport {\n  composeValidators,\n  minValue,\n  mustBeNumber,\n  required,\n} from '../../../utils/validators';\n\nconst Styled = {\n  Container: styled.div`\n    margin: 20px auto;\n  `,\n  FieldContentContainer: styled.div`\n    display: flex;\n    margin: 10px auto;\n  `,\n  FieldError: styled.span`\n    color: #ff1a1a;\n    font-weight: 500;\n    margin-left: 10px;\n  `,\n  FieldLabel: styled.label`\n    flex: 0 0 100px;\n  `,\n  FieldSelectContainer: styled.div`\n    flex: 1 0 0;\n  `,\n  FieldInputContainer: styled.div`\n    flex: 1 0 0;\n  `,\n  Select: styled.select`\n    padding: 5px;\n\n    max-width: 200px;\n    width: 100%;\n  `,\n  Input: styled.input`\n    padding: 5px;\n\n    max-width: 185px;\n    width: 100%;\n  `,\n};\n\nconst ElevationField = () => (\n  <Styled.Container>\n    <h3>Elevation</h3>\n    <Field\n      name=\"holeFeet\"\n      validate={composeValidators(required, mustBeNumber, minValue(1))}>\n      {({ input, meta }) => (\n        <Styled.FieldContentContainer>\n          <Styled.FieldLabel>Hole</Styled.FieldLabel>\n          <Styled.FieldInputContainer>\n            <Styled.Input {...input} type=\"text\" placeholder=\"Feet from hole\" />\n            {meta.error && meta.touched && (\n              <Styled.FieldError>{meta.error}</Styled.FieldError>\n            )}\n          </Styled.FieldInputContainer>\n        </Styled.FieldContentContainer>\n      )}\n    </Field>\n\n    <Field name=\"elevationType\" validate={required}>\n      {({ input, meta }) => (\n        <Styled.FieldContentContainer>\n          <Styled.FieldLabel>Direction</Styled.FieldLabel>\n          <Styled.FieldSelectContainer>\n            <Styled.Select {...input}>\n              <option />\n              <option value=\"up\">Uphill</option>\n              <option value=\"down\">Downhill</option>\n            </Styled.Select>\n            {meta.error && meta.touched && (\n              <Styled.FieldError>{meta.error}</Styled.FieldError>\n            )}\n          </Styled.FieldSelectContainer>\n        </Styled.FieldContentContainer>\n      )}\n    </Field>\n\n    <Field\n      name=\"elevationInches\"\n      validate={composeValidators(required, mustBeNumber, minValue(0))}>\n      {({ input, meta }) => (\n        <Styled.FieldContentContainer>\n          <Styled.FieldLabel>Inches</Styled.FieldLabel>\n          <Styled.FieldInputContainer>\n            <Styled.Input {...input} type=\"text\" placeholder=\"Inches\" />\n            {meta.error && meta.touched && (\n              <Styled.FieldError>{meta.error}</Styled.FieldError>\n            )}\n          </Styled.FieldInputContainer>\n        </Styled.FieldContentContainer>\n      )}\n    </Field>\n  </Styled.Container>\n);\n\nexport default ElevationField;\n","import React from 'react';\nimport { Form } from 'react-final-form';\nimport styled from 'styled-components';\n\nimport { calcElevation, getSlopeSum } from '../../../utils/slopeCalculations';\n\nimport Slopes from './Slopes';\nimport ElevationField from './ElevationField';\n\nconst Styled = {\n  Form: styled.form`\n    max-width: 500px;\n    width: 100%;\n  `,\n  SubmitButton: styled.button`\n    background-color: #4e9af1;\n    border: 2px solid #368def;\n    border-radius: 3px;\n    color: white;\n    cursor: pointer;\n    font-size: 15px;\n    font-weight: 500;\n    margin-top: 20px;\n    padding: 10px 20px;\n\n    &:hover {\n      background-color: #368def;\n    }\n  `,\n};\n\nconst PuttForm = (props) => {\n  const handleOnSubmit = (data) => {\n    const elevationData = calcElevation(data);\n    const sum = getSlopeSum(data);\n\n    props.renderResults({ clickCount: sum, elevationData });\n  };\n\n  return (\n    <Form onSubmit={handleOnSubmit}>\n      {(props) => (\n        <Styled.Form onSubmit={props.handleSubmit}>\n          <Slopes />\n          <ElevationField />\n          <Styled.SubmitButton type=\"submit\">Submit</Styled.SubmitButton>\n        </Styled.Form>\n      )}\n    </Form>\n  );\n};\n\nexport default PuttForm;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport PuttForm from './PuttForm';\n\nconst Styled = {\n  Container: styled.div`\n    display: flex;\n\n    align-items: center;\n    flex-direction: column;\n\n    margin-bottom: 50px;\n  `,\n  SubmissionContainer: styled.div`\n    max-width: 500px;\n    width: 100%;\n  `,\n  SubmissionHeader: styled.div`\n    margin: 10px auto;\n  `,\n  ResultsContainer: styled.div`\n    margin: 10px auto;\n  `,\n  ResultsItem: styled.div`\n    margin: 5px auto 5px 20px;\n  `,\n  Button: styled.button`\n    background-color: #4e9af1;\n    border: 2px solid #368def;\n    color: white;\n    cursor: pointer;\n    font-size: 15px;\n    font-weight: 500;\n    margin-top: 20px;\n    padding: 10px 20px;\n\n    &:hover {\n      background-color: #368def;\n    }\n  `,\n};\n\nconst Home = () => {\n  const [isFormSubmitted, setIsFormSubmitted] = useState(false);\n  const [results, setResults] = useState(null);\n\n  const handleData = (data) => {\n    setIsFormSubmitted(true);\n    setResults(data);\n  };\n\n  const restartForm = () => {\n    setIsFormSubmitted(false);\n    setResults(null);\n  };\n\n  return (\n    <Styled.Container>\n      <h1>PGA Putting - Green Grid Reading</h1>\n\n      {isFormSubmitted ? (\n        <Styled.SubmissionContainer>\n          <Styled.SubmissionHeader>\n            Based on your input, our calculations suggest the below:\n          </Styled.SubmissionHeader>\n          <Styled.ResultsContainer>\n            <Styled.ResultsItem>\n              Move {results.clickCount} clicks to either left or right\n            </Styled.ResultsItem>\n            <Styled.ResultsItem>\n              {results.elevationData.direction === 'up' ? 'Add' : 'Substract'}{' '}\n              {results.elevationData.adjustedTotalFeet} feet as total hole\n              distance\n            </Styled.ResultsItem>\n          </Styled.ResultsContainer>\n\n          <Styled.Button type=\"button\" onClick={restartForm}>\n            Restart\n          </Styled.Button>\n        </Styled.SubmissionContainer>\n      ) : (\n        <PuttForm renderResults={handleData} />\n      )}\n    </Styled.Container>\n  );\n};\n\nexport default Home;\n","import Home from \"./pages/Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}