{"version":3,"sources":["utils/slopeCalculations.js","utils/validators.js","pages/Home/PuttForm/components/SlopeField.jsx","pages/Home/PuttForm/components/GreenSlopes.jsx","pages/Home/PuttForm/components/YellowSlopes.jsx","pages/Home/PuttForm/components/OrangeSlopes.jsx","pages/Home/PuttForm/components/RedSlopes.jsx","pages/Home/PuttForm/components/ElevationField.jsx","pages/Home/PuttForm/PuttForm.jsx","pages/Home/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["getSlopeSum","data","sum","count","Object","keys","filter","key","includes","forEach","userInputCount","typeKey","replace","userInputType","Number","parseInt","calcGreenSlope","calcYellowSlope","calcOrangeSlope","calcRedSlope","elevationType","Math","floor","elevationInches","required","value","mustBeNumber","isNaN","minValue","min","composeValidators","validators","reduce","error","validator","Styled","Container","styled","div","Header","h3","FieldContainer","FieldContentContainer","FieldError","span","FieldLabel","label","FieldSelectContainer","FieldInputContainer","Select","select","Input","input","GreenSlopeField","props","displayHeader","name","fieldName","validate","meta","options","map","i","touched","type","placeholder","Button","button","GreenSlopes","useState","greenSlopeFormFieldCount","setGreenSlopeFormFieldCount","greenSlopeUserCreatedFields","setGreenSlopeUserCreatedFields","SlopeField","FieldComponent","index","onClick","disabled","YellowSlopes","slopeFormFieldCount","setSlopeFormFieldCount","slopeUserCreatedFields","setSlopeUserCreatedFields","OrangeSlopes","RedSlopes","ElevationField","Form","form","SubmitButton","PuttForm","onSubmit","elevationData","feetHole","holeFeet","inches","feetAdjustment","adjustedTotalFeet","isFiftyFeetOrMore","direction","calcElevation","renderResults","clickCount","handleSubmit","SubmissionHeader","ResultsContainer","ResultsItem","Home","isFormSubmitted","setIsFormSubmitted","results","setResults","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAgFMA,EAAc,SAACC,GACnB,IAKIC,EAtFiB,SAACD,GACtB,IAAIE,EAAQ,EAgBZ,OAdYC,OAAOC,KAAKJ,GAAMK,QAAO,SAACC,GAAD,OAASA,EAAIC,SAAS,iBAErDC,SAAQ,SAACF,GACb,GAAIA,EAAIC,SAAS,SAAU,CACzB,IAAME,EAAiBT,EAAKM,GACtBI,EAAUJ,EAAIK,QAAQ,QAAS,QAC/BC,EAAgBZ,EAAKU,GAE3BR,GACEW,OAAOC,SAASL,EAAgB,IAChCI,OAAOC,SAASF,EAAe,QAI9BV,EAgEiBa,CAAef,GA7DjB,SAACA,GACvB,IAAIE,EAAQ,EAgBZ,OAdYC,OAAOC,KAAKJ,GAAMK,QAAO,SAACC,GAAD,OAASA,EAAIC,SAAS,kBAErDC,SAAQ,SAACF,GACb,GAAIA,EAAIC,SAAS,SAAU,CACzB,IAAME,EAAiBT,EAAKM,GACtBI,EAAUJ,EAAIK,QAAQ,QAAS,QAC/BC,EAAgBZ,EAAKU,GAE3BR,GACEW,OAAOC,SAASL,EAAgB,IAChCI,OAAOC,SAASF,EAAe,QAI9BV,EA6CkBc,CAAgBhB,GA1CnB,SAACA,GACvB,IAAIE,EAAQ,EAgBZ,OAdYC,OAAOC,KAAKJ,GAAMK,QAAO,SAACC,GAAD,OAASA,EAAIC,SAAS,kBAErDC,SAAQ,SAACF,GACb,GAAIA,EAAIC,SAAS,SAAU,CACzB,IAAME,EAAiBT,EAAKM,GACtBI,EAAUJ,EAAIK,QAAQ,QAAS,QAC/BC,EAAgBZ,EAAKU,GAE3BR,GACEW,OAAOC,SAASL,EAAgB,IAChCI,OAAOC,SAASF,EAAe,QAI9BV,EA0BkBe,CAAgBjB,GAvBtB,SAACA,GACpB,IAAIE,EAAQ,EAgBZ,OAdYC,OAAOC,KAAKJ,GAAMK,QAAO,SAACC,GAAD,OAASA,EAAIC,SAAS,eAErDC,SAAQ,SAACF,GACb,GAAIA,EAAIC,SAAS,SAAU,CACzB,IAAME,EAAiBT,EAAKM,GACtBI,EAAUJ,EAAIK,QAAQ,QAAS,QAC/BC,EAAgBZ,EAAKU,GAE3BR,GACEW,OAAOC,SAASL,EAAgB,IAChCI,OAAOC,SAASF,EAAe,QAI9BV,EAOegB,CAAalB,GAKR,SAAvBA,EAAKmB,gBAOPlB,GAJmBmB,KAAKC,MACtBR,OAAOC,SAASd,EAAKsB,gBAAiB,IAAM,IAMhD,OAAOrB,G,cCnGIsB,EAAW,SAACC,GAAD,OAAYA,EAAQ,KAAO,YAEtCC,EAAe,SAACD,GAAD,OAC1BX,OAAOa,MAAMF,GAAS,mBAAqB,MAEhCG,EAAW,SAACC,GAAD,OAAS,SAACJ,GAAD,OAC/BX,OAAOa,MAAMF,IAAUA,GAASI,EAAM,KAAtC,iCAAuEA,KAE5DC,EAAoB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAmB,SAACN,GAAD,OAClDM,EAAWC,QAAO,SAACC,EAAOC,GAAR,OAAsBD,GAASC,EAAUT,KAAQ,Q,ihCCErE,IAAMU,EAAS,CACbC,UAAWC,IAAOC,IAAT,KACTC,OAAQF,IAAOG,GAAT,KACNC,eAAgBJ,IAAOC,IAAT,KACdI,sBAAuBL,IAAOC,IAAT,KAKrBK,WAAYN,IAAOO,KAAT,KAKVC,WAAYR,IAAOS,MAAT,KAKVC,qBAAsBV,IAAOC,IAAT,KAGpBU,oBAAqBX,IAAOC,IAAT,KAGnBW,OAAQZ,IAAOa,OAAT,KAMNC,MAAOd,IAAOe,MAAT,MAyDQC,EAjDS,SAACC,GAAD,OACtB,eAACnB,EAAOC,UAAR,WACGkB,EAAMR,OAASQ,EAAMC,eACpB,eAACpB,EAAOI,OAAR,WAAgBe,EAAMR,MAAtB,aAGF,eAACX,EAAOM,eAAR,WACE,cAAC,IAAD,CAAOe,KAAI,UAAKF,EAAMG,UAAX,QAA4BC,SAAUlC,EAAjD,SACG,gBAAG4B,EAAH,EAAGA,MAAOO,EAAV,EAAUA,KAAV,OACC,eAACxB,EAAOO,sBAAR,WACGY,EAAMR,OAAS,cAACX,EAAOU,WAAR,0BAEhB,eAACV,EAAOY,qBAAR,WACE,eAACZ,EAAOc,OAAR,2BAAmBG,GAAnB,cACE,2BACCE,EAAMM,QAAQC,KAAI,SAACpC,EAAOqC,GAAR,OACjB,yBAAQrC,MAAOA,EAAf,UACG6B,EAAMR,MADT,IACiBrB,IADjB,iBAAqCqC,EAAI,WAM5CH,EAAK1B,OAAS0B,EAAKI,SAClB,cAAC5B,EAAOQ,WAAR,UAAoBgB,EAAK1B,iBAOnC,cAAC,IAAD,CACEuB,KAAI,UAAKF,EAAMG,UAAX,SACJC,SAAU5B,EAAkBN,EAAUE,EAAcE,EAAS,IAF/D,SAGG,gBAAGwB,EAAH,EAAGA,MAAOO,EAAV,EAAUA,KAAV,OACC,eAACxB,EAAOO,sBAAR,WACE,cAACP,EAAOU,WAAR,kBACA,eAACV,EAAOa,oBAAR,WACE,cAACb,EAAOgB,MAAR,2BAAkBC,GAAlB,IAAyBY,KAAK,OAAOC,YAAY,WAChDN,EAAK1B,OAAS0B,EAAKI,SAClB,cAAC5B,EAAOQ,WAAR,UAAoBgB,EAAK1B,wB,yaCpFzC,IAAME,EAAS,CACbC,UAAWC,IAAOC,IAAT,KAGT4B,OAAQ7B,IAAO8B,OAAT,MA0DOC,EA1CK,WAAO,IAAD,EACwCC,mBAAS,GADjD,mBACjBC,EADiB,KACSC,EADT,OAKpBF,mBAAS,IALW,mBAGtBG,EAHsB,KAItBC,EAJsB,KAOxB,OACE,eAAC,EAAOrC,UAAR,WACE,cAACsC,EAAD,CACEjB,UAAU,aACVX,MAAM,QACNc,QAAS,CAAC,EAAG,EAAG,GAChBL,eAAa,IAGdiB,EAA4BX,KAAI,SAACc,EAAgBC,GAAjB,OAC/B,8BACE,cAACD,EAAD,CACElB,UAAS,oBAAemB,EAAQ,GAChC9B,MAAM,QACNc,QAAS,CAAC,EAAG,EAAG,MAJpB,4BAA+BgB,EAAQ,OASzC,cAAC,EAAOV,OAAR,CACEF,KAAK,SACLa,QAAS,WACPJ,EAA+B,GAAD,mBACzBD,GADyB,CAE5BE,KAEFH,EAA4BD,EAA2B,IAEzDQ,SAAuC,IAA7BR,EATZ,uC,oZC9CN,IAAMnC,EAAS,CACbC,UAAWC,IAAOC,IAAT,KAGT4B,OAAQ7B,IAAO8B,OAAT,MA6COY,EA9BM,WAAO,IAAD,EAC6BV,mBAAS,GADtC,mBAClBW,EADkB,KACGC,EADH,OAEmCZ,mBAAS,IAF5C,mBAElBa,EAFkB,KAEMC,EAFN,KAIzB,OACE,eAAC,EAAO/C,UAAR,WACG8C,EAAuBrB,KAAI,SAACc,EAAgBC,GAAjB,OAC1B,8BACE,cAACD,EAAD,CACElB,UAAS,qBAAgBmB,EAAQ,GACjC9B,MAAM,SACNc,QAAS,CAAC,EAAG,EAAG,GAChBL,cAAyB,IAAVqB,KALnB,6BAAgCA,EAAQ,OAU1C,cAAC,EAAOV,OAAR,CACEF,KAAK,SACLa,QAAS,WACPM,EAA0B,GAAD,mBAAKD,GAAL,CAA6BR,KACtDO,EAAuBD,EAAsB,IAE/CF,SAAkC,IAAxBE,EANZ,wC,oZCpCN,IAAM7C,EAAS,CACbC,UAAWC,IAAOC,IAAT,KAGT4B,OAAQ7B,IAAO8B,OAAT,MA6COiB,EA9BM,WAAO,IAAD,EAC6Bf,mBAAS,GADtC,mBAClBW,EADkB,KACGC,EADH,OAEmCZ,mBAAS,IAF5C,mBAElBa,EAFkB,KAEMC,EAFN,KAIzB,OACE,eAAC,EAAO/C,UAAR,WACG8C,EAAuBrB,KAAI,SAACc,EAAgBC,GAAjB,OAC1B,8BACE,cAACD,EAAD,CACElB,UAAS,qBAAgBmB,EAAQ,GACjC9B,MAAM,SACNc,QAAS,CAAC,EAAG,EAAG,GAChBL,cAAyB,IAAVqB,KALnB,6BAAgCA,EAAQ,OAU1C,cAAC,EAAOV,OAAR,CACEF,KAAK,SACLa,QAAS,WACPM,EAA0B,GAAD,mBAAKD,GAAL,CAA6BR,KACtDO,EAAuBD,EAAsB,IAE/CF,SAAkC,IAAxBE,EANZ,wC,uaCpCN,IAAM7C,EAAS,CACbC,UAAWC,IAAOC,IAAT,KAGT4B,OAAQ7B,IAAO8B,OAAT,MA8COkB,EA9BG,WAAO,IAAD,EACgChB,mBAAS,GADzC,mBACfW,EADe,KACMC,EADN,OAEsCZ,mBAAS,IAF/C,mBAEfa,EAFe,KAESC,EAFT,KAItB,OACE,eAAC,EAAO/C,UAAR,WACG8C,EAAuBrB,KAAI,SAACc,EAAgBC,GAAjB,OAC1B,8BACE,cAACD,EAAD,CACElB,UAAS,kBAAamB,EAAQ,GAC9B9B,MAAM,MACNc,QAAS,CAAC,GAAI,GAAI,IAClBL,cAAyB,IAAVqB,KALnB,0BAA6BA,EAAQ,OAUvC,cAAC,EAAOV,OAAR,CACEF,KAAK,SACLa,QAAS,WACPM,EAA0B,GAAD,mBAAKD,GAAL,CAA6BR,KACtDO,EAAuBD,EAAsB,IAE/CF,SAAkC,IAAxBE,EANZ,qCCWSM,EA3CQ,kBACrB,qCACE,2CACA,cAAC,IAAD,CACE9B,KAAK,WACLE,SAAU5B,EAAkBN,EAAUE,EAAcE,EAAS,IAF/D,SAGG,gBAAGwB,EAAH,EAAGA,MAAOO,EAAV,EAAUA,KAAV,OACC,gCACE,yCACA,iDAAWP,GAAX,IAAkBY,KAAK,OAAOC,YAAY,oBACzCN,EAAK1B,OAAS0B,EAAKI,SAAW,+BAAOJ,EAAK1B,cAKjD,cAAC,IAAD,CAAOuB,KAAK,gBAAgBE,SAAUlC,EAAtC,SACG,gBAAG4B,EAAH,EAAGA,MAAOO,EAAV,EAAUA,KAAV,OACC,gCACE,yCACA,mDAAYP,GAAZ,cACE,2BACA,wBAAQ3B,MAAM,KAAd,oBACA,wBAAQA,MAAM,OAAd,0BAEDkC,EAAK1B,OAAS0B,EAAKI,SAAW,+BAAOJ,EAAK1B,cAKjD,cAAC,IAAD,CACEuB,KAAK,kBACLE,SAAU5B,EAAkBN,EAAUE,EAAcE,EAAS,IAF/D,SAGG,gBAAGwB,EAAH,EAAGA,MAAOO,EAAV,EAAUA,KAAV,OACC,gCACE,2CACA,iDAAWP,GAAX,IAAkBY,KAAK,OAAOC,YAAY,YACzCN,EAAK1B,OAAS0B,EAAKI,SAAW,+BAAOJ,EAAK1B,kB,2bClCrD,IAAME,EAAS,CACboD,KAAMlD,IAAOmD,KAAT,KAIJC,aAAcpD,IAAO8B,OAAT,MAwCCuB,EAxBE,SAACpC,GAQhB,OACE,cAAC,IAAD,CAAMqC,SARe,SAAC1F,GACtB,IAAM2F,ERmEY,SAAC3F,GACrB,IAAM4F,EAAW/E,OAAOC,SAASd,EAAK6F,SAAU,IAC1CC,EAASjF,OAAOC,SAASd,EAAKsB,gBAAiB,IAE/CyE,EAAwC,OAAvB/F,EAAKmB,cAAkC,IAAT2E,EAAeA,EAC9DE,EACmB,OAAvBhG,EAAKmB,cACDyE,EAAWG,EACXH,EAAWG,EAEXE,EAAoBD,GAAqB,GAE/C,MAAO,CACLD,iBACAC,kBAAmBC,EACfD,EAAoB,EACpBA,EACJC,oBACAC,UAAWlG,EAAKmB,eQrFMgF,CAAcnG,GAC9BC,EAAMF,EAAYC,GAExBqD,EAAM+C,cAAc,CAAEC,WAAYpG,EAAK0F,mBAIvC,SACG,SAACtC,GAAD,OACC,eAAC,EAAOiC,KAAR,CAAaI,SAAUrC,EAAMiD,aAA7B,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAOd,aAAR,CAAqBzB,KAAK,SAA1B,2B,0jBC7CV,IAAM7B,GAAS,CACbC,UAAWC,IAAOC,IAAT,MASTkE,iBAAkBnE,IAAOC,IAAT,MAChBmE,iBAAkBpE,IAAOC,IAAT,MAChBoE,YAAarE,IAAOC,IAAT,KACX4B,OAAQ7B,IAAO8B,OAAT,MAkDOwC,GA5CF,WAAO,IAAD,EAC6BtC,oBAAS,GADtC,mBACVuC,EADU,KACOC,EADP,OAEaxC,mBAAS,MAFtB,mBAEVyC,EAFU,KAEDC,EAFC,KAcjB,OACE,eAAC,GAAO3E,UAAR,WACE,kEAECwE,EACC,qCACE,cAAC,GAAOJ,iBAAR,uEAGA,eAAC,GAAOC,iBAAR,WACE,eAAC,GAAOC,YAAR,mBACQI,EAAQR,WADhB,sCAGA,eAAC,GAAOI,YAAR,WACuC,OAApCI,EAAQlB,cAAcO,UAAqB,MAAQ,YAAa,IAChEW,EAAQlB,cAAcK,kBAFzB,eAMF,cAAC,GAAO/B,OAAR,CAAeF,KAAK,SAASa,QAxBjB,WAClBgC,GAAmB,GACnBE,EAAW,OAsBL,wBAKF,cAAC,EAAD,CAAUV,cAlCG,SAACpG,GAClB4G,GAAmB,GACnBE,EAAW9G,UCpBA+G,OARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,GAAD,OCOSC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.c7431506.chunk.js","sourcesContent":["const calcGreenSlope = (data) => {\n  let count = 0;\n\n  let props = Object.keys(data).filter((key) => key.includes('greenSlope'));\n\n  props.forEach((key) => {\n    if (key.includes('Count')) {\n      const userInputCount = data[key];\n      const typeKey = key.replace('Count', 'Type');\n      const userInputType = data[typeKey];\n\n      count +=\n        Number.parseInt(userInputCount, 10) *\n        Number.parseInt(userInputType, 10);\n    }\n  });\n\n  return count;\n};\n\nconst calcYellowSlope = (data) => {\n  let count = 0;\n\n  let props = Object.keys(data).filter((key) => key.includes('yellowSlope'));\n\n  props.forEach((key) => {\n    if (key.includes('Count')) {\n      const userInputCount = data[key];\n      const typeKey = key.replace('Count', 'Type');\n      const userInputType = data[typeKey];\n\n      count +=\n        Number.parseInt(userInputCount, 10) *\n        Number.parseInt(userInputType, 10);\n    }\n  });\n\n  return count;\n};\n\nconst calcOrangeSlope = (data) => {\n  let count = 0;\n\n  let props = Object.keys(data).filter((key) => key.includes('orangeSlope'));\n\n  props.forEach((key) => {\n    if (key.includes('Count')) {\n      const userInputCount = data[key];\n      const typeKey = key.replace('Count', 'Type');\n      const userInputType = data[typeKey];\n\n      count +=\n        Number.parseInt(userInputCount, 10) *\n        Number.parseInt(userInputType, 10);\n    }\n  });\n\n  return count;\n};\n\nconst calcRedSlope = (data) => {\n  let count = 0;\n\n  let props = Object.keys(data).filter((key) => key.includes('redSlope'));\n\n  props.forEach((key) => {\n    if (key.includes('Count')) {\n      const userInputCount = data[key];\n      const typeKey = key.replace('Count', 'Type');\n      const userInputType = data[typeKey];\n\n      count +=\n        Number.parseInt(userInputCount, 10) *\n        Number.parseInt(userInputType, 10);\n    }\n  });\n\n  return count;\n};\n\nconst getSlopeSum = (data) => {\n  const greenSlopeCount = calcGreenSlope(data);\n  const yellowSlopeCount = calcYellowSlope(data);\n  const orangeSlopeCount = calcOrangeSlope(data);\n  const redSlopeCount = calcRedSlope(data);\n\n  let sum =\n    greenSlopeCount + yellowSlopeCount + orangeSlopeCount + redSlopeCount;\n\n  if (data.elevationType === 'down') {\n    // We need to adjust the sum when working with a downhill putt.\n    // For every 2 inches, we want to add 1 to our sum.\n    const adjustment = Math.floor(\n      Number.parseInt(data.elevationInches, 10) / 2,\n    );\n\n    sum += adjustment;\n  }\n\n  return sum;\n};\n\nconst calcElevation = (data) => {\n  const feetHole = Number.parseInt(data.holeFeet, 10);\n  const inches = Number.parseInt(data.elevationInches, 10);\n\n  const feetAdjustment = data.elevationType === 'up' ? inches * 1.5 : inches;\n  const adjustedTotalFeet =\n    data.elevationType === 'up'\n      ? feetHole + feetAdjustment\n      : feetHole - feetAdjustment;\n\n  const isFiftyFeetOrMore = adjustedTotalFeet >= 50;\n\n  return {\n    feetAdjustment,\n    adjustedTotalFeet: isFiftyFeetOrMore\n      ? adjustedTotalFeet / 2\n      : adjustedTotalFeet,\n    isFiftyFeetOrMore,\n    direction: data.elevationType,\n  };\n};\n\nexport { getSlopeSum, calcElevation };\n","export const required = (value) => (value ? null : 'Required');\n\nexport const mustBeNumber = (value) =>\n  Number.isNaN(value) ? 'Must be a number' : null;\n\nexport const minValue = (min) => (value) =>\n  Number.isNaN(value) || value >= min ? null : `Should be greater than ${min}`;\n\nexport const composeValidators = (...validators) => (value) =>\n  validators.reduce((error, validator) => error || validator(value), null);\n","import React from 'react';\nimport { Field } from 'react-final-form';\nimport styled from 'styled-components';\n\nimport {\n  composeValidators,\n  minValue,\n  mustBeNumber,\n  required,\n} from '../../../../utils/validators';\n\nconst Styled = {\n  Container: styled.div``,\n  Header: styled.h3``,\n  FieldContainer: styled.div``,\n  FieldContentContainer: styled.div`\n    display: flex;\n\n    margin: 20px auto;\n  `,\n  FieldError: styled.span`\n    color: #ff1a1a;\n    font-weight: 500;\n    margin-left: 10px;\n  `,\n  FieldLabel: styled.label`\n    flex: 0 0 100px;\n\n    margin-right: 20px;\n  `,\n  FieldSelectContainer: styled.div`\n    flex: 1 0 0;\n  `,\n  FieldInputContainer: styled.div`\n    flex: 1 0 0;\n  `,\n  Select: styled.select`\n    padding: 5px;\n\n    max-width: 200px;\n    width: 100%;\n  `,\n  Input: styled.input`\n    padding: 5px;\n\n    max-width: 185px;\n    width: 100%;\n  `,\n};\n\nconst GreenSlopeField = (props) => (\n  <Styled.Container>\n    {props.label && props.displayHeader && (\n      <Styled.Header>{props.label} Slopes</Styled.Header>\n    )}\n\n    <Styled.FieldContainer>\n      <Field name={`${props.fieldName}Type`} validate={required}>\n        {({ input, meta }) => (\n          <Styled.FieldContentContainer>\n            {props.label && <Styled.FieldLabel>Slope Type:</Styled.FieldLabel>}\n\n            <Styled.FieldSelectContainer>\n              <Styled.Select {...input}>\n                <option />\n                {props.options.map((value, i) => (\n                  <option value={value} key={`option-${i + 1}`}>\n                    {props.label} {value}\n                  </option>\n                ))}\n              </Styled.Select>\n\n              {meta.error && meta.touched && (\n                <Styled.FieldError>{meta.error}</Styled.FieldError>\n              )}\n            </Styled.FieldSelectContainer>\n          </Styled.FieldContentContainer>\n        )}\n      </Field>\n\n      <Field\n        name={`${props.fieldName}Count`}\n        validate={composeValidators(required, mustBeNumber, minValue(1))}>\n        {({ input, meta }) => (\n          <Styled.FieldContentContainer>\n            <Styled.FieldLabel>No.</Styled.FieldLabel>\n            <Styled.FieldInputContainer>\n              <Styled.Input {...input} type=\"text\" placeholder=\"Count\" />\n              {meta.error && meta.touched && (\n                <Styled.FieldError>{meta.error}</Styled.FieldError>\n              )}\n            </Styled.FieldInputContainer>\n          </Styled.FieldContentContainer>\n        )}\n      </Field>\n    </Styled.FieldContainer>\n  </Styled.Container>\n);\n\nexport default GreenSlopeField;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport SlopeField from './SlopeField';\n\nconst Styled = {\n  Container: styled.div`\n    margin: 20px auto;\n  `,\n  Button: styled.button`\n    background-color: #77dd77;\n    border: 2px solid #4ed34e;\n    border-radius: 3px;\n    color: #444c44;\n    cursor: pointer;\n    font-size: 13px;\n    font-weight: 500;\n    padding: 10px;\n\n    &:hover {\n      background-color: #4ed34e;\n    }\n  `,\n};\n\nconst GreenSlopes = () => {\n  const [greenSlopeFormFieldCount, setGreenSlopeFormFieldCount] = useState(1);\n  const [\n    greenSlopeUserCreatedFields,\n    setGreenSlopeUserCreatedFields,\n  ] = useState([]);\n\n  return (\n    <Styled.Container>\n      <SlopeField\n        fieldName=\"greenSlope\"\n        label=\"Green\"\n        options={[1, 2, 3]}\n        displayHeader\n      />\n\n      {greenSlopeUserCreatedFields.map((FieldComponent, index) => (\n        <div key={`green-slope-field-${index + 1}`}>\n          <FieldComponent\n            fieldName={`greenSlope${index + 1}`}\n            label=\"Green\"\n            options={[1, 2, 3]}\n          />\n        </div>\n      ))}\n\n      <Styled.Button\n        type=\"button\"\n        onClick={() => {\n          setGreenSlopeUserCreatedFields([\n            ...greenSlopeUserCreatedFields,\n            SlopeField,\n          ]);\n          setGreenSlopeFormFieldCount(greenSlopeFormFieldCount + 1);\n        }}\n        disabled={greenSlopeFormFieldCount === 3}>\n        Add Green Slope Field\n      </Styled.Button>\n    </Styled.Container>\n  );\n};\n\nexport default GreenSlopes;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport SlopeField from './SlopeField';\n\nconst Styled = {\n  Container: styled.div`\n    margin: 20px auto;\n  `,\n  Button: styled.button`\n    background-color: #ffff89;\n    border: 2px solid #e2e2e2;\n    border-radius: 3px;\n    cursor: pointer;\n    font-size: 13px;\n    font-weight: 500;\n    padding: 10px;\n\n    &:hover {\n      background-color: #e2e2e2;\n    }\n  `,\n};\n\nconst YellowSlopes = () => {\n  const [slopeFormFieldCount, setSlopeFormFieldCount] = useState(0);\n  const [slopeUserCreatedFields, setSlopeUserCreatedFields] = useState([]);\n\n  return (\n    <Styled.Container>\n      {slopeUserCreatedFields.map((FieldComponent, index) => (\n        <div key={`yellow-slope-field-${index + 1}`}>\n          <FieldComponent\n            fieldName={`yellowSlope${index + 1}`}\n            label=\"Yellow\"\n            options={[4, 5, 6]}\n            displayHeader={index === 0}\n          />\n        </div>\n      ))}\n\n      <Styled.Button\n        type=\"button\"\n        onClick={() => {\n          setSlopeUserCreatedFields([...slopeUserCreatedFields, SlopeField]);\n          setSlopeFormFieldCount(slopeFormFieldCount + 1);\n        }}\n        disabled={slopeFormFieldCount === 3}>\n        Add Yellow Slope Field\n      </Styled.Button>\n    </Styled.Container>\n  );\n};\n\nexport default YellowSlopes;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport SlopeField from './SlopeField';\n\nconst Styled = {\n  Container: styled.div`\n    margin: 20px auto;\n  `,\n  Button: styled.button`\n    background-color: #ffa500;\n    border: 2px solid #ff7b00;\n    border-radius: 3px;\n    cursor: pointer;\n    font-size: 13px;\n    font-weight: 500;\n    padding: 10px;\n\n    &:hover {\n      background-color: #ff7b00;\n    }\n  `,\n};\n\nconst OrangeSlopes = () => {\n  const [slopeFormFieldCount, setSlopeFormFieldCount] = useState(0);\n  const [slopeUserCreatedFields, setSlopeUserCreatedFields] = useState([]);\n\n  return (\n    <Styled.Container>\n      {slopeUserCreatedFields.map((FieldComponent, index) => (\n        <div key={`orange-slope-field-${index + 1}`}>\n          <FieldComponent\n            fieldName={`orangeSlope${index + 1}`}\n            label=\"Orange\"\n            options={[7, 8, 9]}\n            displayHeader={index === 0}\n          />\n        </div>\n      ))}\n\n      <Styled.Button\n        type=\"button\"\n        onClick={() => {\n          setSlopeUserCreatedFields([...slopeUserCreatedFields, SlopeField]);\n          setSlopeFormFieldCount(slopeFormFieldCount + 1);\n        }}\n        disabled={slopeFormFieldCount === 3}>\n        Add Orange Slope Field\n      </Styled.Button>\n    </Styled.Container>\n  );\n};\n\nexport default OrangeSlopes;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport SlopeField from './SlopeField';\n\nconst Styled = {\n  Container: styled.div`\n    margin: 20px auto;\n  `,\n  Button: styled.button`\n    background-color: #ff3333;\n    border: 2px solid #ff1a1a;\n    border-radius: 3px;\n    color: white;\n    cursor: pointer;\n    font-size: 13px;\n    font-weight: 500;\n    padding: 10px;\n\n    &:hover {\n      background-color: #ff1a1a;\n    }\n  `,\n};\n\nconst RedSlopes = () => {\n  const [slopeFormFieldCount, setSlopeFormFieldCount] = useState(0);\n  const [slopeUserCreatedFields, setSlopeUserCreatedFields] = useState([]);\n\n  return (\n    <Styled.Container>\n      {slopeUserCreatedFields.map((FieldComponent, index) => (\n        <div key={`red-slope-field-${index + 1}`}>\n          <FieldComponent\n            fieldName={`redSlope${index + 1}`}\n            label=\"Red\"\n            options={[10, 11, 12]}\n            displayHeader={index === 0}\n          />\n        </div>\n      ))}\n\n      <Styled.Button\n        type=\"button\"\n        onClick={() => {\n          setSlopeUserCreatedFields([...slopeUserCreatedFields, SlopeField]);\n          setSlopeFormFieldCount(slopeFormFieldCount + 1);\n        }}\n        disabled={slopeFormFieldCount === 3}>\n        Add Red Slope Field\n      </Styled.Button>\n    </Styled.Container>\n  );\n};\n\nexport default RedSlopes;\n","import React from 'react';\nimport { Field } from 'react-final-form';\n\nimport {\n  composeValidators,\n  minValue,\n  mustBeNumber,\n  required,\n} from '../../../../utils/validators';\n\nconst ElevationField = () => (\n  <>\n    <h3>Elevation</h3>\n    <Field\n      name=\"holeFeet\"\n      validate={composeValidators(required, mustBeNumber, minValue(1))}>\n      {({ input, meta }) => (\n        <div>\n          <label>Hole</label>\n          <input {...input} type=\"text\" placeholder=\"Feet from hole\" />\n          {meta.error && meta.touched && <span>{meta.error}</span>}\n        </div>\n      )}\n    </Field>\n\n    <Field name=\"elevationType\" validate={required}>\n      {({ input, meta }) => (\n        <div>\n          <label>Woot</label>\n          <select {...input}>\n            <option />\n            <option value=\"up\">Uphill</option>\n            <option value=\"down\">Downhill</option>\n          </select>\n          {meta.error && meta.touched && <span>{meta.error}</span>}\n        </div>\n      )}\n    </Field>\n\n    <Field\n      name=\"elevationInches\"\n      validate={composeValidators(required, mustBeNumber, minValue(0))}>\n      {({ input, meta }) => (\n        <div>\n          <label>Inches</label>\n          <input {...input} type=\"text\" placeholder=\"Inches\" />\n          {meta.error && meta.touched && <span>{meta.error}</span>}\n        </div>\n      )}\n    </Field>\n  </>\n);\n\nexport default ElevationField;\n","import React from 'react';\nimport { Form } from 'react-final-form';\nimport styled from 'styled-components';\n\nimport { calcElevation, getSlopeSum } from '../../../utils/slopeCalculations';\n\nimport GreenSlopes from './components/GreenSlopes';\nimport YellowSlopes from './components/YellowSlopes';\nimport OrangeSlopes from './components/OrangeSlopes';\nimport RedSlopes from './components/RedSlopes';\nimport ElevationField from './components/ElevationField';\n\nconst Styled = {\n  Form: styled.form`\n    max-width: 500px;\n    width: 100%;\n  `,\n  SubmitButton: styled.button`\n    background-color: #4e9af1;\n    border: 2px solid #368def;\n    color: white;\n    cursor: pointer;\n    font-size: 15px;\n    font-weight: 500;\n    margin-top: 20px;\n    padding: 10px 20px;\n\n    &:hover {\n      background-color: #368def;\n    }\n  `,\n};\n\nconst PuttForm = (props) => {\n  const handleOnSubmit = (data) => {\n    const elevationData = calcElevation(data);\n    const sum = getSlopeSum(data);\n\n    props.renderResults({ clickCount: sum, elevationData });\n  };\n\n  return (\n    <Form onSubmit={handleOnSubmit}>\n      {(props) => (\n        <Styled.Form onSubmit={props.handleSubmit}>\n          <GreenSlopes />\n          <YellowSlopes />\n          <OrangeSlopes />\n          <RedSlopes />\n          <ElevationField />\n          <Styled.SubmitButton type=\"submit\">Submit</Styled.SubmitButton>\n        </Styled.Form>\n      )}\n    </Form>\n  );\n};\n\nexport default PuttForm;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport PuttForm from './PuttForm';\n\nconst Styled = {\n  Container: styled.div`\n    display: flex;\n\n    align-items: center;\n    flex-direction: column;\n    justify-content: center;\n\n    margin-bottom: 50px;\n  `,\n  SubmissionHeader: styled.div``,\n  ResultsContainer: styled.div``,\n  ResultsItem: styled.div``,\n  Button: styled.button`\n    border: 0.16em solid rgba(255, 255, 255, 0);\n    border-radiums: 2em;\n  `,\n};\n\nconst Home = () => {\n  const [isFormSubmitted, setIsFormSubmitted] = useState(false);\n  const [results, setResults] = useState(null);\n\n  const handleData = (data) => {\n    setIsFormSubmitted(true);\n    setResults(data);\n  };\n\n  const restartForm = () => {\n    setIsFormSubmitted(false);\n    setResults(null);\n  };\n\n  return (\n    <Styled.Container>\n      <h1>PGA Putting - Green Grid Reading</h1>\n\n      {isFormSubmitted ? (\n        <>\n          <Styled.SubmissionHeader>\n            Based on your input, our calculations suggest the below:\n          </Styled.SubmissionHeader>\n          <Styled.ResultsContainer>\n            <Styled.ResultsItem>\n              Move {results.clickCount} clicks to either left or right.\n            </Styled.ResultsItem>\n            <Styled.ResultsItem>\n              {results.elevationData.direction === 'up' ? 'Add' : 'Substract'}{' '}\n              {results.elevationData.adjustedTotalFeet} feet.\n            </Styled.ResultsItem>\n          </Styled.ResultsContainer>\n\n          <Styled.Button type=\"button\" onClick={restartForm}>\n            Restart\n          </Styled.Button>\n        </>\n      ) : (\n        <PuttForm renderResults={handleData} />\n      )}\n    </Styled.Container>\n  );\n};\n\nexport default Home;\n","import Home from \"./pages/Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}